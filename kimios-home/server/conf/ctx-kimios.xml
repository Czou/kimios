<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Kimios - Document Management System Software
  ~ Copyright (C) 2012-2013  DevLib'
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 2 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">


    <bean class="org.kimios.kernel.events.impl.AddonDataHandler">
           <constructor-arg>
               <bean class="org.codehaus.jackson.map.ObjectMapper" />
           </constructor-arg>
    </bean>

    <!-- Load the standard Kimios Spring Configuration files -->
    <import resource="classpath*:/META-INF/spring/ctx-kimios*.xml" />

    <!--<import resource="datasource/${datastdaource.mode}/ctx-kimios-ds.xml"/>  -->


    <!-- Data Source -->
    <bean id="kimiosDataSource" class="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean">
        <property name="uniqueResourceName" value="jdbc/dms"/>
        <property name="maxPoolSize" value="100"/>
        <property name="minPoolSize" value="20"/>
        <property name="maxIdleTime" value="1000"/>
        <property name="driverClassName">
            <value>${jdbc.driver}</value>
        </property>
        <property name="url">
            <value>${jdbc.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.user}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>
        <property name="testQuery">
            <value>select 1;</value>
        </property>
    </bean>

    <!-- JNDI Data Source Settings Example :

      JNDI Sping Bean
      <bean id="kimiosDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="${jdbc.jndids}" />
    </bean>

    Tomcat JNDI Setup Example (inside webappDir/META-INF/context.xml

   <Context ...>
    <Resource name="jdbc/dms" auth="Container" type="com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean"
          factory="org.apache.naming.factory.BeanFactory"
          driverClassName="org.postgresql.Driver"
          uniqueResourceName="jdbc/dms"
          user="postgres" password="farfou" url="jdbc:postgresql://localhost:5432/kimios-test"
      maxPoolSize="50" minPoolSize="30" maxIdleTime="1000" readOnly="true" />
    <Transaction name="UserTransaction" factory="com.atomikos.icatch.jta.UserTransactionFactory" />
  </Context>
    -->


    <!-- Initialize Transaction Manager -->
    <bean id="userTransactionService"
            class="com.atomikos.icatch.config.UserTransactionServiceImp"
            init-method="init" destroy-method="shutdownForce">
        <constructor-arg>
            <props>
                <prop key="com.atomikos.icatch.service">
                    com.atomikos.icatch.standalone.UserTransactionServiceFactory
                </prop>
            </props>
        </constructor-arg>
    </bean>
    <bean id="AtomikosTransactionManager"
            class="com.atomikos.icatch.jta.UserTransactionManager"
            init-method="init" destroy-method="close"
            depends-on="userTransactionService">
        <property name="forceShutdown" value="false"/>
    </bean>
    <bean id="AtomikosUserTransaction"
            class="com.atomikos.icatch.jta.UserTransactionImp"
            depends-on="userTransactionService">
        <property name="transactionTimeout" value="300"/>
    </bean>
    <bean id="transactionManager"
            class="org.springframework.transaction.jta.JtaTransactionManager"
            depends-on="userTransactionService">
        <property name="transactionManager" ref="AtomikosTransactionManager"/>
        <property name="userTransaction" ref="AtomikosUserTransaction"/>
    </bean>
</beans>
