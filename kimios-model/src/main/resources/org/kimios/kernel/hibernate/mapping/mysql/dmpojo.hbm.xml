<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Kimios - Document Management System Software
  ~ Copyright (C) 2008-2015  DevLib'
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 2 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~ You should have received a copy of the GNU Affero General Public License
  ~ aong with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<hibernate-mapping
        xmlns="http://www.hibernate.org/xsd/hibernate-mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.hibernate.org/xsd/hibernate-mapping
        classpath://org/hibernate/hibernate-mapping-4.0.xsd"
        auto-import="false"
>
    <!-- MySQL Pojo Mapping -->
    <class name="org.kimios.kernel.ws.pojo.Document" entity-name="DocumentPojo" mutable="false">
        <subselect>

            select `d`.`dm_entity_id` AS `id`,
            `d`.`dm_entity_name`, `d`.`dm_entity_owner` ,
            `d`.`dm_entity_owner_source`,`d`.`dm_entity_creation_date`,
            `d`.`dm_entity_update_date`,`d`.`folder_id`,`d`.`mime_type`,
            `d`.`extension`, `d`.`dm_entity_path`, `dv`.`id` AS `version_id`,
            `dv`.`type_name`,`dv`.`version_length`,`dv`.`document_type_id`,
            `dv`.`creation_date` AS `version_creation_date`,`dv`.`modification_date` AS
            `version_update_date`,if(isnull(`chk`.`document_id`),0,1) AS `locked`,
            `chk`.`username` AS `lock_by`,`chk`.`user_source` AS `lock_source`,`chk`.`checkout_date` AS
            `lock_date`,`ds`.`id` AS `last_wfs`,
            `req`.`outOfWorkflow` AS `outofworkflow`,`ds`.`status_name`, `d`.`dm_entity_addon_data` from (select dent.dm_entity_id, dent.dm_entity_name, dent.dm_entity_path, dent.dm_entity_owner_source,
            dent.dm_entity_owner,
            dent.update_date as dm_entity_update_date, dent.creation_date as dm_entity_creation_date, dent.dm_entity_addon_data as dm_entity_addon_data,doc.*
            from dm_entity dent join document doc on dent.dm_entity_id = doc.id) `d` join
            (select `v1`.`creation_date` AS `maxCreationDate`,
            `v2`.`id`,`v2`.`author`,`v2`.`author_source`,
            `v2`.`creation_date`,`v2`.`modification_date`,
            `v2`.`document_id`,`v2`.`storage_path`,`v2`.`document_type_id`,
            `v2`.`version_length`,`v2`.`hash_md5`,`v2`.`hash_sha1`,`dt`.`type_name`
            from (((select max(`document_version`.`creation_date`) AS `creation_date`,
            `document_version`.`document_id` from `document_version` group by
            `document_version`.`document_id`) `v1` join `document_version` `v2` on(((`v1`.`document_id` =
            `v2`.`document_id`)
            and (`v1`.`creation_date` = `v2`.`creation_date`))))
            left join `document_type` `dt` on((`v2`.`document_type_id` = `dt`.`id`))))
            `dv`
            on((`d`.`id` = `dv`.`document_id`)) left join
            (select `document_id`,`username` AS `username`,
            `user_source`,`checkout_date`
            from `checkout`) as `chk`
            on(`d`.`id` = `chk`.`document_id`)
            left join
            (select b.document_id, CASE WHEN ((c.successor_id IS NOT NULL) OR (b.request_status IN(1, 3)))
            THEN false ELSE true END
            outOfWorkflow FROM
            (select `document_id`, max(`request_date`) as request_date
            from `document_workflow_status_request` group by `document_id`) as `a1`
            join
            `document_workflow_status_request` `b` on
            ((`a1`.`request_date` = `b`.`request_date`) and (`a1`.`document_id` = `b`.`document_id`))
            join `workflow_status` `c` on `c`.`id` = `b`.`workflow_status_id`) `req`
            on((`d`.`id` = `req`.`document_id`))
            left join
            (select `e`.`document_id`,
            max(`e`.`status_date`),`ws`.`id` AS `id`,
            `ws`.`status_name` from ((`document_workflow_status` `e` join `document_workflow_status`
            `f`
            on(((`f`.`document_id` = `e`.`document_id`) and (`e`.`status_date` = `f`.`status_date`)))) join
            `workflow_status` `ws`
            on(`ws`.`id` = `f`.`workflow_status_id`)) group by `e`.`document_id`) `ds`
            on(`d`.`id` = `ds`.`document_id`)



        </subselect>
        <id name="uid" type="long" column="id">
            <generator class="assigned"></generator>
        </id>
        <property name="name">
            <column name="dm_entity_name"/>
        </property>
        <property name="owner">
            <column name="dm_entity_owner"/>
        </property>
        <property name="ownerSource">
            <column name="dm_entity_owner_source"/>
        </property>
        <property name="creationDate">
            <column sql-type="date" name="dm_entity_creation_date"/>
        </property>
        <property name="updateDate">
            <column sql-type="date" name="dm_entity_update_date"/>
        </property>
        <property name="lastVersionId">
            <column name="version_id" />
        </property>
        <property name="versionCreationDate">
            <column sql-type="date" name="version_creation_date"/>
        </property>
        <property name="versionUpdateDate">
            <column sql-type="date" name="version_update_date"/>
        </property>
        <property name="folderUid">
            <column name="folder_id"/>
        </property>
        <property name="mimeType">
            <column name="mime_type"/>
        </property>
        <property name="extension">
            <column name="extension"/>
        </property>
        <property name="path">
            <column name="dm_entity_path"/>
        </property>
        <property name="documentTypeUid" not-null="true">
            <column name="document_type_id" not-null="false" default="0"></column>
        </property>
        <property name="documentTypeName" not-null="true">
            <column name="type_name" not-null="false" default=""></column>
        </property>
        <property name="checkedOut">
            <column name="locked" default="false"></column>
        </property>
        <property name="checkoutUser">
            <column name="lock_by"></column>
        </property>
        <property name="checkoutUserSource">
            <column name="lock_source"/>
        </property>
        <property name="checkoutDate">
            <column name="lock_date"/>
        </property>
        <property name="length">
            <column name="version_length"/>
        </property>
        <property name="workflowStatusUid">
            <column name="last_wfs"></column>
        </property>
        <property name="workflowStatusName">
            <column name="status_name"/>
        </property>
        <property name="outOfWorkflow">
            <column name="outofworkflow"></column>
        </property>
        <property name="addonDatas">
            <column name="dm_entity_addon_data"></column>
        </property>
    </class>
    <sql-query name="documentPojosUid">
        <return class="DocumentPojo"/>
        <![CDATA[
          select d.dm_entity_id AS id,
          d.dm_entity_name AS dm_entity_name,d.dm_entity_owner AS dm_entity_owner,
          d.dm_entity_owner_source AS dm_entity_owner_source,d.dm_entity_creation_date,
          d.dm_entity_update_date,d.folder_id AS folder_id,d.mime_type AS mime_type,
          d.extension AS extension, d.dm_entity_path, dv.id AS version_id,
          dv.type_name AS type_name,dv.version_length,dv.document_type_id,
          dv.creation_date AS version_creation_date,dv.modification_date AS
          version_update_date,if(isnull(chk.document_id),0,1) AS locked,
          chk.username AS lock_by,chk.user_source AS lock_source,chk.checkout_date AS
          lock_date,ds.id AS last_wfs,
          req.outOfWorkflow AS outofworkflow,ds.status_name AS status_name, d.dm_entity_addon_data AS dm_entity_addon_data from
          ((((
            (select dent.dm_entity_id, dent.dm_entity_name, dent.dm_entity_path, dent.dm_entity_owner_source,
          dent.dm_entity_owner,
          dent.update_date as dm_entity_update_date, dent.creation_date as dm_entity_creation_date, dent.dm_entity_addon_data as dm_entity_addon_data,doc.*
          from dm_entity dent join document doc on dent.dm_entity_id = doc.id) d join
          (select v1.creation_date AS maxCreationDate,
          v2.id AS id,v2.author AS author,v2.author_source AS author_source,
          v2.creation_date AS creation_date,v2.modification_date AS modification_date,
          v2.document_id AS document_id,v2.storage_path AS storage_path,v2.document_type_id AS
          document_type_id,
          v2.version_length AS version_length,v2.hash_md5 AS hash_md5,v2.hash_sha1 AS
          hash_sha1,dt.type_name AS type_name
          from (((select max(document_version.creation_date) AS creation_date,
          document_version.document_id AS document_id from document_version group by
          document_version.document_id) v1 join document_version v2 on(v1.document_id =
          v2.document_id and  v1.document_id in (:idsList)
          and v1.creation_date = v2.creation_date))
          left join document_type dt on(v2.document_type_id = dt.id)))
          dv
          on((d.id = dv.document_id))) left join
          (select document_id AS document_id,username AS username,
          user_source AS user_source,checkout_date AS checkout_date
          from checkout) as chk
          on((d.id = chk.document_id)))
          left join
          (select b.document_id, CASE WHEN ((c.successor_id IS NOT NULL) OR (b.request_status IN(1, 3)))
          THEN false ELSE true END
          outOfWorkflow FROM
          (select document_id AS document_id, max(request_date) as request_date
          from document_workflow_status_request group by document_id) as a1
          join
          document_workflow_status_request b on
          ((a1.request_date = b.request_date) and (a1.document_id = b.document_id))
          join workflow_status c on c.id = b.workflow_status_id) req
          on((d.id = req.document_id)))
          left join
          (select e.document_id AS document_id,
          max(e.status_date),ws.id AS id,
          ws.status_name AS status_name from ((document_workflow_status e join document_workflow_status
          f
          on(((f.document_id = e.document_id) and (e.status_date = f.status_date)))) join
          workflow_status ws
          on((ws.id = f.workflow_status_id))) group by e.document_id) ds
          on((d.id = ds.document_id)))
          where d.id in (:idsList)
          ]]>
    </sql-query>
    <sql-query name="findDocumentPojoById">
        <return class="DocumentPojo"/>
        <![CDATA[
          select d.dm_entity_id AS id,
          d.dm_entity_name AS dm_entity_name,d.dm_entity_owner AS dm_entity_owner,
          d.dm_entity_owner_source AS dm_entity_owner_source,d.dm_entity_creation_date,
          d.dm_entity_update_date,d.folder_id AS folder_id,d.mime_type AS mime_type,
          d.extension AS extension, d.dm_entity_path, dv.id AS version_id,
          dv.type_name AS type_name,dv.version_length,dv.document_type_id,
          dv.creation_date AS version_creation_date,dv.modification_date AS
          version_update_date,if(isnull(chk.document_id),0,1) AS locked,
          chk.username AS lock_by,chk.user_source AS lock_source,chk.checkout_date AS
          lock_date,ds.id AS last_wfs,
          req.outOfWorkflow AS outofworkflow,ds.status_name AS status_name, d.dm_entity_addon_data AS dm_entity_addon_data from
          ((((
            (select dent.dm_entity_id, dent.dm_entity_name, dent.dm_entity_path, dent.dm_entity_owner_source,
          dent.dm_entity_owner,
          dent.update_date as dm_entity_update_date, dent.creation_date as dm_entity_creation_date, dent.dm_entity_addon_data as dm_entity_addon_data,doc.*
          from dm_entity dent join document doc on dent.dm_entity_id = doc.id) d join
          (select v1.creation_date AS maxCreationDate,
          v2.id AS id,v2.author AS author,v2.author_source AS author_source,
          v2.creation_date AS creation_date,v2.modification_date AS modification_date,
          v2.document_id AS document_id,v2.storage_path AS storage_path,v2.document_type_id AS
          document_type_id,
          v2.version_length AS version_length,v2.hash_md5 AS hash_md5,v2.hash_sha1 AS
          hash_sha1,dt.type_name AS type_name
          from (((select max(document_version.creation_date) AS creation_date,
          document_version.document_id AS document_id from document_version group by
          document_version.document_id) v1 join document_version v2 on(v1.document_id =
          v2.document_id and  v1.document_id = :documentId
          and v1.creation_date = v2.creation_date))
          left join document_type dt on(v2.document_type_id = dt.id)))
          dv
          on((d.id = dv.document_id))) left join
          (select document_id AS document_id,username AS username,
          user_source AS user_source,checkout_date AS checkout_date
          from checkout) as chk
          on((d.id = chk.document_id)))
          left join
          (select b.document_id, CASE WHEN ((c.successor_id IS NOT NULL) OR (b.request_status IN(1, 3)))
          THEN false ELSE true END
          outOfWorkflow FROM
          (select document_id AS document_id, max(request_date) as request_date
          from document_workflow_status_request group by document_id) as a1
          join
          document_workflow_status_request b on
          ((a1.request_date = b.request_date) and (a1.document_id = b.document_id))
          join workflow_status c on c.id = b.workflow_status_id) req
          on((d.id = req.document_id)))
          left join
          (select e.document_id AS document_id,
          max(e.status_date),ws.id AS id,
          ws.status_name AS status_name from ((document_workflow_status e join document_workflow_status
          f
          on(((f.document_id = e.document_id) and (e.status_date = f.status_date)))) join
          workflow_status ws
          on((ws.id = f.workflow_status_id))) group by e.document_id) ds
          on((d.id = ds.document_id)))
          where d.id = :documentId
          ]]>
    </sql-query>

</hibernate-mapping>
