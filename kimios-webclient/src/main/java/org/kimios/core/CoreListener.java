/*
 * Kimios - Document Management System Software
 * Copyright (C) 2012-2013  DevLib'
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kimios.core;

import java.io.File;
import java.util.Properties;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.apache.commons.io.output.FileWriterWithEncoding;
import org.kimios.controller.Controller;
import org.kimios.core.configuration.Config;
import org.kimios.i18n.InternationalizationManager;
import org.kimios.utils.configuration.ConfigurationManager;
import org.kimios.utils.spring.SpringWebContextLauncher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.context.ContextLoader;

/**
 * @author Fabien Alin
 */
public class CoreListener extends ContextLoader implements ServletContextListener
{
    final Logger log = LoggerFactory.getLogger(CoreListener.class);

    private ContextLoader contextLoader;

    public void contextInitialized(ServletContextEvent event)
    {
        try {
            this.contextLoader = this;

            /*
               Check config file exist
            */
            String settingsPath =
                    System.getProperty("kimios.home") + "/client/conf/kimios.properties";
            File f = new File(settingsPath);
            if (!f.exists()) {
                /*
                               Load Port From environment
                */
                try {
                    String serverPort = System.getProperty("kimios.service.port");
                    String serverWebAppName = System.getenv("kimios.service.appname");
                    serverWebAppName =
                            serverWebAppName != null && serverWebAppName.length() > 0 ? serverWebAppName : "kimios";
                    serverPort = serverPort != null && serverPort.length() > 0 ? serverPort : "8080";
                    log.info("Kimios Web Client is running on " + serverPort);
                    /*
                       Generate file and, include server port
                    */
                    Properties webProperties = new Properties();
                    webProperties.setProperty(Config.DM_CHUNK_SIZE, "102400");
                    webProperties
                            .setProperty(Config.DM_SERVER_URL,
                                    "http://127.0.0.1:" + serverPort + "/" + serverWebAppName);

                    webProperties.setProperty(Config.DM_SERVICE_CONTEXT, "/services");

                    String temporaryPathName = "kimios-tmp";
                    File temporaryDirectory = new File(temporaryPathName);
                    temporaryDirectory.mkdirs();
                    webProperties.setProperty(Config.DM_TMP_FILES_PATH, temporaryPathName);



                    webProperties.store(new FileWriterWithEncoding(f, "UTF-8"),
                            "Kimios Settings File generated by the Kimios Deployer\n\n" +
                                    "Copyright @ Devlib' 2012-2013" +
                                    "Authors: Jérôme LUDMANN, Fabien ALIN");
                } catch (Exception e) {
                    log.error("Error while generating automatic settings", e);
                    f = null;
                }
            }

            if (f != null && f.exists()) {
                SpringWebContextLauncher.launchApp(event.getServletContext(), this.contextLoader);
                InternationalizationManager.getInstance("EN");
                CoreInitializer.contextInitialized(event.getServletContext().getRealPath("/"));
                Controller.init(event.getServletContext());
                new FileCleaner().cleanTemporaryFiles(new File(
                        ConfigurationManager.getValue(Config.DM_TMP_FILES_PATH).toString()));
            } else {
                log.error("Kimios Web Client Setting not found. Application unavailable");
            }
        } catch (Exception e) {
            log.error("kimios Client Listener", e);
        }
    }

    public void contextDestroyed(ServletContextEvent event)
    {
        log.info("kimios Web Client Closing ...");
        SpringWebContextLauncher.shutdownApp(event.getServletContext(), this.contextLoader);
        log.info("kimios Web Client Closed");
    }
}
